/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package screen;

import Unuse.Encryptions;
import dna.vn.box.DialogBox;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import rsa.CryptResult;
import rsa.RSA_Decryptor;
import rsa.RSA_Encryptor;
import rsa.RSA_KeyGen;

/**
 *
 * @author Essn
 */
public class AsymmetricForm extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public AsymmetricForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        fileChooser1 = new javax.swing.JFileChooser();
        btnBack = new javax.swing.JButton();
        jLabel0 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        linkfile1 = new java.awt.TextField();
        Browser = new javax.swing.JButton();
        encrypt = new javax.swing.JButton();
        decrypt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        linkfile2 = new java.awt.TextField();
        open = new javax.swing.JButton();
        Import = new javax.swing.JButton();
        Export = new javax.swing.JButton();
        Generate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        nTf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        eTf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        rsa_outputMessage = new javax.swing.JTextArea();

        fileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\NGOC ANH\\Desktop"));
        fileChooser.setDialogTitle("Open");
        fileChooser.setFileFilter(new MyCustomFilter());
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        fileChooser1.setDialogTitle("Open");
        fileChooser1.setFileFilter(new FileNameExtensionFilter("RSA key(*.rsk)", "rsk"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CryptTool");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
        setResizable(false);

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBack.setText("BACK");
        btnBack.setPreferredSize(new java.awt.Dimension(80, 40));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel0.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        jLabel0.setText("DNA CRYPTOOL");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("File Input:");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 30));

        linkfile1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        linkfile1.setPreferredSize(new java.awt.Dimension(600, 30));
        linkfile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkfile1ActionPerformed(evt);
            }
        });
        linkfile1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                linkfile1KeyPressed(evt);
            }
        });

        Browser.setText("...");
        Browser.setPreferredSize(new java.awt.Dimension(100, 30));
        Browser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowserActionPerformed(evt);
            }
        });

        encrypt.setText("Encrypt");
        encrypt.setPreferredSize(new java.awt.Dimension(100, 30));
        encrypt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encryptMouseClicked(evt);
            }
        });

        decrypt.setText("Decrypt");
        decrypt.setPreferredSize(new java.awt.Dimension(100, 30));
        decrypt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                decryptMouseClicked(evt);
            }
        });
        decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Encrypted File:");
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 30));

        linkfile2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        linkfile2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        linkfile2.setPreferredSize(new java.awt.Dimension(600, 30));
        linkfile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkfile2ActionPerformed(evt);
            }
        });
        linkfile2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                linkfile2KeyPressed(evt);
            }
        });

        open.setText("Open");
        open.setPreferredSize(new java.awt.Dimension(100, 30));
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        Import.setText("Import Key");
        Import.setPreferredSize(new java.awt.Dimension(120, 30));
        Import.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ImportMouseClicked(evt);
            }
        });

        Export.setText("Export Key");
        Export.setPreferredSize(new java.awt.Dimension(120, 30));
        Export.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExportMouseClicked(evt);
            }
        });

        Generate.setText("Generate Key");
        Generate.setPreferredSize(new java.awt.Dimension(120, 30));
        Generate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GenerateMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("n");
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 30));

        nTf.setEditable(false);
        nTf.setPreferredSize(new java.awt.Dimension(600, 30));
        nTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nTfActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("e");
        jLabel4.setPreferredSize(new java.awt.Dimension(100, 30));

        eTf.setEditable(false);
        eTf.setPreferredSize(new java.awt.Dimension(600, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("d");
        jLabel5.setPreferredSize(new java.awt.Dimension(100, 30));

        dTf.setEditable(false);
        dTf.setPreferredSize(new java.awt.Dimension(600, 30));
        dTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dTfActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 150));

        rsa_outputMessage.setColumns(20);
        rsa_outputMessage.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        rsa_outputMessage.setRows(5);
        jScrollPane1.setViewportView(rsa_outputMessage);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(205, 205, 205)
                        .addComponent(jLabel0))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(linkfile1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(linkfile2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(open, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Browser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eTf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dTf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nTf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(Import, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(Export, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(Generate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(175, 175, 175))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel0))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linkfile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(open, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linkfile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Import, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Export, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Generate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void BrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowserActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            linkfile1.setText(file.getAbsolutePath());
            
            //rsa_outputMessage.setText("");
            //linkfile2.setText("");
            //linkfile2.setText(Encryptions.encrypt(file));
//            textarea.setText(Encryptions.encrypt());

//            try {
//              // What to do with the file, e.g. display it in a TextArea
//                textarea.setText("");
//
//                if (file.getAbsolutePath().endsWith(".txt")) {
//                    textarea.read( new FileReader( file.getAbsolutePath() ), null );
//                }
//            } catch (IOException ex) {
//              System.out.println("problem accessing file"+file.getAbsolutePath());
//            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_BrowserActionPerformed

    private void linkfile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkfile2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linkfile2ActionPerformed

    private void linkfile2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_linkfile2KeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_linkfile2KeyPressed

    private void linkfile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkfile1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linkfile1ActionPerformed

    private void linkfile1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_linkfile1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
//            int returnVal = fileChooser.showOpenDialog(this);
            File file_encrypt = new File(linkfile1.getText());
            
            linkfile2.setText("");
            linkfile2.setText(Encryptions.encrypt(file_encrypt));
//            try{
//                textarea.read( new FileReader(file ), null );
//            } 
//            catch (IOException ex){
//                System.out.println("problem accessing file"+file.getAbsolutePath());
//
//            }
        }
    }//GEN-LAST:event_linkfile1KeyPressed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
                    try {
                        File myFile = new File(linkfile2.getText());
                        Desktop.getDesktop().open(myFile);
                    } catch (IOException e) {
                        // System probably doesn't have a default PDF program
                    }
                }
//        try {
//            Desktop.getDesktop().open(linkfile2.getText());
////            Runtime runtime = Runtime.getRuntime();
////            Process process = runtime.exec("C:\\Windows\\notepad.exe "+linkfile2.getText());
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_openActionPerformed

    private void ImportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImportMouseClicked
//        int returnVal = fileChooser1.showOpenDialog(this);
//        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            File file = fileChooser1.getSelectedFile();
//            RSA_KeyGen.fromFile(file.getAbsolutePath(), res -> {
//                            rsa_keyGen = res;
//                            nTf.setText(rsa_keyGen.n.toString());
//                            eTf.setText(rsa_keyGen.e.toString());
//                            dTf.setText(rsa_keyGen.d.toString());
//                        }, null);
        DialogBox.chooseFileDialog("Open", result -> {
                        
                        RSA_KeyGen.fromFile(result, res -> {
                            rsa_keyGen = res;
                            nTf.setText(rsa_keyGen.n.toString());
                            eTf.setText(rsa_keyGen.e.toString());
                            dTf.setText(rsa_keyGen.d.toString());
                            rsa_outputMessage.append(hr);
                            rsa_outputMessage.append("Imported!\n");
                        }, null);
                    },
                    null,
                    new FileNameExtensionFilter("RSA key(*.rsk)", "rsk"));
//        
        // TODO add your handling code here:
    }//GEN-LAST:event_ImportMouseClicked

    private void GenerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GenerateMouseClicked
            rsa_outputMessage.append(hr);
            rsa_outputMessage.append("Generate key\n");
            long startTime = System.currentTimeMillis();
            rsa_keyGen = RSA_KeyGen.generateKeys(64 * 8);
            rsa_outputMessage.append("Time : " + (System.currentTimeMillis() - startTime) + "(ms)\n");
            nTf.setText(rsa_keyGen.n.toString());
            eTf.setText(rsa_keyGen.e.toString());
            dTf.setText(rsa_keyGen.d.toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_GenerateMouseClicked

    private void nTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nTfActionPerformed

    private void ExportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExportMouseClicked
        if (rsa_keyGen == null) return;
        DialogBox.chooseFileDialog("Save", result -> {
                    DialogBox.passwordCreateDialog("Encrypt you key", result1 ->
                            {
                                String p = result;
                                String p1 = p;
                                String p2 = p;
                                if (!p.endsWith(".rsk")) p += ".rsk";
                                if (!p1.endsWith(".publickey")) p1 += ".publickey";
                                if (!p2.endsWith(".privatekey")) p2 += ".privatekey";
                                BigInteger vanull = rsa_keyGen.getd().multiply(rsa_keyGen.getd());

                                RSA_KeyGen keypublic = new RSA_KeyGen(64*8,rsa_keyGen.getn(),rsa_keyGen.gete(),vanull);
                                keypublic.saveToFile(p1, result1);
                                RSA_KeyGen keyprivate = new RSA_KeyGen(64*8,rsa_keyGen.getn(),vanull,rsa_keyGen.getd());
                                keyprivate.saveToFile(p2, result1);

                                rsa_keyGen.saveToFile(p, result1);
                                rsa_outputMessage.append(hr);
                                rsa_outputMessage.append("Exported. Save to "+p+"\n");
                            },
                            null);
                },
                null,
                new FileNameExtensionFilter("RSA key(*.rsk)", "rsk"));
        
        // TODO add your handling code here:
    }//GEN-LAST:event_ExportMouseClicked

    private void encryptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encryptMouseClicked
        // TODO add your handling code here:
        if (rsa_keyGen == null) {
                rsa_outputMessage.append("Generate a new key or import it!\n");
                return;
            }

            if (linkfile1.getText().length() == 0) {
                rsa_outputMessage.append("You must choose a file!\n");
                return;
            }

            if (!(new File(linkfile1.getText()).exists())) {
                rsa_outputMessage.append("File not found!\n");
                return;
            }
            String p = linkfile1.getText();
            String po = p + ".rse";
            RSA_Encryptor encryptor = new RSA_Encryptor(rsa_keyGen.bitLength / 8, rsa_keyGen.n, rsa_keyGen.e);
            rsa_outputMessage.append(hr);
            CryptResult res = encryptor.encryptFile(p, po);
            if (res.isOK) {
                rsa_outputMessage.append("Encrypted : " + res.sizeOfData + " bytes\nTime :" + res.time + "(ms)\n");
                rsa_outputMessage.append("Save to : " + po + "\n");
                linkfile2.setText(po);

            } else {
                rsa_outputMessage.append("Encrypt fail!\n");
            }
    }//GEN-LAST:event_encryptMouseClicked

    private void decryptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_decryptMouseClicked
        // TODO add your handling code here:
        if (rsa_keyGen == null) {
                rsa_outputMessage.append("Generate a new key or import it!\n");
                return;
            }

            if (linkfile1.getText().length() == 0) {
                rsa_outputMessage.append("You must choose a file!\n");
                return;
            }

            if (!(new File(linkfile1.getText()).exists())) {
                rsa_outputMessage.append("File not found!\n");
                return;
            }

            if (!linkfile1.getText().endsWith("rse")) {
                rsa_outputMessage.append("Can't decrypt this file (file isn't end with .rse)!\n");
                return;
            }
            String p = linkfile1.getText();
            String op = p.substring(0, p.length() - 8) + "_"
                    + System.currentTimeMillis() / 2000 + p.substring(p.length() - 8, p.length() - 4);
//            System.out.print(op);
//            System.out.print(p);
            rsa_outputMessage.append(hr);
            CryptResult res = new RSA_Decryptor(rsa_keyGen.bitLength / 8, rsa_keyGen.n, rsa_keyGen.d).decryptFile(p, op);
            if (res.isOK) {
                rsa_outputMessage.append("Decrypted : " + res.sizeOfData + " bytes\nTime :" + res.time + "(ms)\n");
                rsa_outputMessage.append("Save to : " + op + "\n");
                linkfile2.setText(op);

            } else {
                rsa_outputMessage.append("Can't decrypt this file or key isn't match!\n");
            }
    }//GEN-LAST:event_decryptMouseClicked

    private void dTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dTfActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.dispose();
        DNAScreen enc_scr = new DNAScreen();
        enc_scr.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_decryptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsymmetricForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsymmetricForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsymmetricForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsymmetricForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 new AsymmetricForm().setVisible(true);
//                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//                frame.setSize(800, 1600);
//                frame.setVisible(true);
//                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Browser;
    private javax.swing.JButton Export;
    private javax.swing.JButton Generate;
    private javax.swing.JButton Import;
    private javax.swing.JButton btnBack;
    private javax.swing.JTextField dTf;
    private javax.swing.JButton decrypt;
    private javax.swing.JTextField eTf;
    private javax.swing.JButton encrypt;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFileChooser fileChooser1;
    private javax.swing.JLabel jLabel0;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.TextField linkfile1;
    private java.awt.TextField linkfile2;
    private javax.swing.JTextField nTf;
    private javax.swing.JButton open;
    private javax.swing.JTextArea rsa_outputMessage;
    // End of variables declaration//GEN-END:variables
    RSA_KeyGen rsa_keyGen ;
    public static String hr = "================================================\n";
//    private void AsymmetricActionPerformed() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }
}
class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Text documents (*.txt)";
        }
    }